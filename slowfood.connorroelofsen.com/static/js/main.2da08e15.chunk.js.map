{"version":3,"sources":["index.js","modules/menu.js","modules/order.js","components/MenuList.jsx","modules/auth.js","components/LoginForm.jsx","components/Login.jsx","App.jsx","serviceWorker.js"],"names":["apiUrl","getProducts","a","axios","get","response","data","products","createOrder","productId","headers","sessionStorage","getItem","JSON","parse","Accept","post","product","console","log","MenuList","state","menuList","orderResponse","addToOrder","e","target","parentElement","dataset","id","result","setState","message","this","getMenuList","menu","authenticated","props","length","map","data-id","data-cy","name","price","onClick","parseInt","Component","authLogin","email","password","storeAuthCredentials","errors","credentials","uid","client","access_token","expiry","token_type","setItem","stringify","LoginForm","submitFormHandler","onSubmit","type","Login","renderLoginForm","onLogin","preventDefault","login_email","value","login_password","authResponse","renderLoginError","App","authError","undefined","Boolean","window","location","hostname","match","defaults","baseURL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2da08e15.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport axios from \"axios\";\n\nlet apiUrl;\nif (process.env.NODE_ENV === \"production\") {\n  apiUrl = \"https://ca-cooper-api.herokuapp.com/api/v1\";\n} else {\n  apiUrl = \"http://localhost:3000/api/v1\";\n}\naxios.defaults.baseURL = apiUrl;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","import axios from 'axios'\n\nconst getProducts = async() => {\n  let response = await axios.get('/products')\n  return response.data.products\n}\n\nexport { getProducts };","import axios from 'axios'\n\nconst createOrder = async (productId) => {\n  let headers = sessionStorage.getItem(\"credentials\")\n  headers = JSON.parse(headers)\n  headers = {\n    ...headers,\n    \"Content-type\": \"application/json\",\n    Accept: \"application/json\"\n  }\n\n  try {\n    const response = await axios.post(\"/orders\", {\n      product: productId\n    }, {\n      headers: headers\n    });\n\n    return response.data\n  } catch(error) {\n    console.log(error.response)\n  }\n};\n\n\nexport { createOrder };","import React, { Component } from \"react\";\nimport { getProducts } from \"../modules/menu\";\nimport { createOrder } from \"../modules/order\";\n\nclass MenuList extends Component {\n  state = {\n    menuList: [],\n    orderResponse: {}\n  };\n\n  componentDidMount() {\n    this.getMenuList();\n  }\n\n  async getMenuList() {\n    let result = await getProducts();\n    this.setState({ menuList: result });\n  }\n  addToOrder = async (e) => {\n    let productId = e.target.parentElement.dataset.id;\n    let result = await createOrder(productId);\n\n    this.setState({\n      orderResponse: { id: productId, message: result.message },\n    });\n  };\n\n  render() {\n    let menu;\n    let authenticated = this.props.authenticated;\n    if (this.state.menuList.length > 0) {\n      menu = this.state.menuList.map((product) => {\n        return (\n          <div data-id={product.id} data-cy={\"product-\" + product.id}>\n            <h3>{product.name}</h3>\n            <p>{product.price}</p>\n            {authenticated && (\n              <button onClick={this.addToOrder}>Add to order</button>\n            )}\n            {product.id == parseInt(this.state.orderResponse.id) && (\n              <p id=\"message\">{this.state.orderResponse.message}</p>\n            )}\n          </div>\n        );\n      });\n    }\n\n    return (\n      <>\n        <div>{menu}</div>\n      </>\n    );\n  }\n}\n\nexport default MenuList;\n","import axios from \"axios\";\n\nconst authLogin = async (email, password) => {\n  let authResponse;\n  try {\n    const response = await axios.post(\"/auth/sign_in\", {\n      email: email,\n      password: password,\n    });\n    storeAuthCredentials(response);\n    return (authResponse = { data: response.data.data, authenticated: true });\n  } catch (error) {\n    return (authResponse = {\n      authenticated: false,\n      data: error.response.data.errors[0],\n    });\n  }\n};\n\nconst storeAuthCredentials = ({ headers }) => {\n  const credentials = {\n    uid: headers[\"uid\"],\n    client: headers[\"client\"],\n    access_token: headers[\"access-token\"],\n    expiry: headers[\"expiry\"],\n    token_type: \"Bearer\",\n  };\n  sessionStorage.setItem(\"credentials\", JSON.stringify(credentials));\n};\n\nexport { authLogin };\n","import React from \"react\";\n\nconst LoginForm = ({submitFormHandler}) => {\n  return (\n    <form onSubmit={submitFormHandler} id=\"login-form\">\n      <label>Email</label>\n      <input name=\"login_email\" type=\"email\" id=\"login_email\"></input>\n\n      <label>Password</label>\n      <input name=\"login_password\" type=\"password\" id=\"login_password\"></input>\n\n      <button id=\"submit\">Submit</button>\n    </form>\n  );\n};\nexport default LoginForm;\n","import React, { Component } from 'react'\nimport { authLogin } from '../modules/auth'\nimport LoginForm from './LoginForm'\n\n\nclass Login extends Component {\n  state = {\n    renderLoginForm: false,\n  }\n\n  onLogin = async (e) => {\n    e.preventDefault();\n    const authResponse = await authLogin(\n      e.target.login_email.value,\n      e.target.login_password.value,\n    );\n    if (authResponse.authenticated) {\n      this.props.authenticated()\n    } else {\n      this.props.renderLoginError(authResponse.data);\n    }\n  };\n\n  render() {\n    \n    return (\n      <>\n      {\n        this.state.renderLoginForm ? (\n          <LoginForm \n          submitFormHandler={this.onLogin}\n          />\n        ) : (\n          <button id='login' onClick={() => this.setState({renderLoginForm: true})} data-cy=\"toggle-login\">Login</button>\n        )\n      }\n      </>\n    )\n  }\n}\nexport default Login","import React, { Component } from \"react\";\nimport MenuList from \"./components/MenuList\";\nimport Login from \"./components/Login\";\n\nclass App extends Component {\n  state = {\n    authenticated: false,\n  };\n  render() {\n    let message;\n\n    this.state.authenticated &&\n      (message = (\n        <p id=\"message\">\n          Hi {JSON.parse(sessionStorage.getItem(\"credentials\")).uid}\n        </p>\n      ));\n\n    this.state.authError &&\n      (message = <p id=\"message\">{this.state.authError}</p>);\n\n    return (\n      <>\n        {message}\n        <h1 data-cy=\"header\">Johan's Pizzeria</h1>\n\n        <MenuList authenticated={this.state.authenticated} />\n        <Login\n          authenticated={() =>\n            this.setState({ authError: undefined, authenticated: true })\n          }\n          renderLoginError={(authResponse) =>\n            this.setState({ authError: authResponse })\n          }\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}