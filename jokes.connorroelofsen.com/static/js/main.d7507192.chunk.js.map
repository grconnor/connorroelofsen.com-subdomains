{"version":3,"sources":["modules/joke.js","modules/positiveVote.js","components/JokeManager.jsx","components/LoginForm.jsx","modules/auth.js","App.jsx","serviceWorker.js","index.js"],"names":["getJoke","a","axios","get","response","data","jokes","saveJoke","joke_id","content","headers","sessionStorage","getItem","JSON","parse","Accept","post","console","error","alert","positiveVote","jokeId","JokeManager","state","currentJoke","displayJoke","voteSaved","voteMessage","jokeSaved","savedJokeMessage","getRandomJoke","result","setState","id","joke","message","currentJokeContent","this","currentJokeUpvote","upvotes","Grid","Row","style","width","height","data-cy","Container","textAlign","props","authenticated","Button","basic","color","onClick","size","Component","LoginForm","submitFormHandler","Form","onSubmit","Input","icon","iconPosition","label","placeholder","name","type","primary","authenticate","email","password","storeAuthCredentials","errors","credentials","uid","client","access_token","expiry","token_type","setItem","stringify","App","showLoginForm","onLogin","e","preventDefault","target","value","renderLogin","class","Menu","inverted","position","Item","Boolean","window","location","hostname","match","apiUrl","defaults","baseURL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d7507192.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst getJoke = async () => {\n  let response = await axios.get(\"/jokes\");\n  return response.data.jokes;\n};\n\nconst saveJoke = async (joke_id, content) => {\n  let headers = sessionStorage.getItem(\"credentials\");\n  headers = JSON.parse(headers);\n  headers = {\n    ...headers,\n    \"Content-type\": \"application/json\",\n    Accept: \"application/json\",\n  };\n  try {\n    let response = await axios.post(\n      \"/jokes\",\n      { joke_id, content },\n      {\n        headers: headers,\n      }\n    );\n    return response.data;\n  } catch (err) {\n    console.error(err);\n    alert(\"Sorry, we were not able to save that joke!\");\n    return false;\n  }\n};\n\nexport { getJoke, saveJoke };\n","import axios from \"axios\";\nconst positiveVote = async (jokeId) => {\n  let headers = sessionStorage.getItem(\"credentials\");\n  headers = JSON.parse(headers);\n  headers = {\n    ...headers,\n    \"Content-type\": \"application/json\",\n    Accept: \"application/json\",\n  };\n  try {\n    let response = await axios.post(\n      \"/votes\",\n      { jokeId },\n      {\n        headers: headers,\n      }\n    );\n    return response.data;\n  } catch (err) {\n    console.error(err);\n    alert(\"Sorry, we are not that funny, we don't have that joke!\");\n    return false;\n  }\n};\nexport { positiveVote };\n","import React, { Component } from \"react\";\nimport { getJoke, saveJoke } from \"../modules/joke\";\nimport { positiveVote } from \"../modules/positiveVote\";\nimport { Button, Container, Grid } from \"semantic-ui-react\";\n\nclass JokeManager extends Component {\n  state = {\n    currentJoke: {},\n    displayJoke: false,\n    voteSaved: false,\n    voteMessage: \"\",\n    jokeSaved: \"\",\n    savedJokeMessage: \"\",\n  };\n\n  getRandomJoke = async () => {\n    let result = await getJoke();\n    this.setState({\n      currentJoke: result,\n      displayJoke: true,\n      voteSaved: false,\n      jokeSaved: false,\n    });\n  };\n\n  voteSaved = async () => {\n    let response = await positiveVote(this.state.currentJoke.id);\n    if (response !== false) {\n      this.setState({\n        currentJoke: response.joke,\n        voteSaved: true,\n        voteMessage: response.message,\n      });\n    }\n  };\n\n  jokeSaved = async () => {\n    let response = await saveJoke(\n      this.state.currentJoke.id,\n      this.state.currentJoke.content\n    );\n    if (response !== false) {\n      this.setState({\n        jokeSaved: true,\n        savedJokeMessage: response.message,\n      });\n    }\n  };\n\n  render() {\n    let currentJokeContent = this.state.currentJoke.content;\n    let currentJokeUpvote = this.state.currentJoke.upvotes;\n\n    return (\n      <>\n        <Grid.Row style={{ width: \"100%\", height: \"45%\" }}>\n          {this.state.displayJoke && (\n            <div data-cy=\"random-joke\">\n              <Container textAlign=\"center\" style={{ width: \"45%\" }}>\n                <p>{currentJokeContent}</p>\n                <h3 data-cy=\"upvote\">upvotes: {currentJokeUpvote}</h3>\n              </Container>\n              <Container textAlign=\"center\">\n                {this.props.authenticated && !this.state.voteSaved ? (\n                  <Button\n                    basic\n                    color=\"green\"\n                    data-cy=\"vote-button\"\n                    onClick={this.voteSaved}\n                  >\n                    Vote +{\" \"}\n                  </Button>\n                ) : (\n                  <h3 data-cy=\"vote-message\"> {this.state.voteMessage}</h3>\n                )}\n                {this.props.authenticated && !this.state.jokeSaved ? (\n                  <Button\n                    basic\n                    color=\"red\"\n                    data-cy=\"save-joke-button\"\n                    onClick={this.jokeSaved}\n                  >\n                    Save Joke\n                  </Button>\n                ) : (\n                  <h3 data-cy=\"saved-joke-message\">\n                    {this.state.savedJokeMessage}\n                  </h3>\n                )}\n              </Container>\n            </div>\n          )}\n        </Grid.Row>\n\n        <Grid.Row style={{ height: \"60%\" }}>\n          <Button\n            color=\"yellow\"\n            size=\"large\"\n            onClick={this.getRandomJoke}\n            data-cy=\"joke\"\n          >\n            Get the joke you need right now\n          </Button>\n        </Grid.Row>\n      </>\n    );\n  }\n}\n\nexport default JokeManager;\n","import React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\n\nconst LoginForm = ({ submitFormHandler }) => {\n  return (\n    <div>\n      <Form data-cy=\"login-form\" onSubmit={submitFormHandler}>\n        <Form.Input\n          icon=\"user\"\n          iconPosition=\"left\"\n          label=\"email:\"\n          placeholder=\"Username\"\n          name=\"email\"\n          type=\"email\"\n          id=\"email\"\n          data-cy=\"email\"\n        />\n\n        <Form.Input\n          icon=\"lock\"\n          iconPosition=\"left\"\n          label=\"password:\"\n          type=\"password\"\n          name=\"password\"\n          id=\"password\"\n          data-cy=\"password\"\n        />\n\n        <Button data-cy=\"button\" id=\"Submit\" content=\"Submit\" primary />\n      </Form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import axios from \"axios\";\n\nconst authenticate = async (email, password) => {\n  try {\n    const response = await axios.post(\"/auth/sign_in\", {\n      email: email,\n      password: password,\n    });\n    await storeAuthCredentials(response);\n    return { authenticated: true };\n  } catch (error) {\n    return { authenticated: false, message: error.response.data.errors[0] };\n  }\n};\n\nconst storeAuthCredentials = ({ headers }) => {\n  const credentials = {\n    uid: headers[\"uid\"],\n    client: headers[\"client\"],\n    access_token: headers[\"access-token\"],\n    expiry: headers[\"expiry\"],\n    token_type: \"Bearer\",\n  };\n  sessionStorage.setItem(\"credentials\", JSON.stringify(credentials));\n};\n\nexport { authenticate };\n","import React, { Component } from \"react\";\nimport JokeManager from \"./components/JokeManager\";\nimport LoginForm from \"./components/LoginForm\";\nimport { authenticate } from \"./modules/auth\";\nimport { Menu, Button, Grid  } from \"semantic-ui-react\";\n\nclass App extends Component {\n  state = {\n    showLoginForm: false,\n    authenticated: false,\n    message: \"\",\n  };\n\n  onLogin = async (e) => {\n    e.preventDefault();\n    const response = await authenticate(\n      e.target.email.value,\n      e.target.password.value\n    );\n    if (response.authenticated) {\n      this.setState({ authenticated: true });\n    } else {\n      this.setState({ message: response.message, showLoginForm: false });\n    }\n  };\n\n  render() {\n    const { showLoginForm, authenticated, message } = this.state;\n    let renderLogin;\n    switch (true) {\n      case showLoginForm && !authenticated:\n        renderLogin = <LoginForm submitFormHandler={this.onLogin} />;\n        break;\n      case !showLoginForm && !authenticated:\n        renderLogin = (\n          <>\n            <Button\n              primary\n              id=\"login\"\n              data-cy=\"login\"\n              onClick={() => this.setState({ showLoginForm: true })}\n            >\n              Login\n            </Button>\n            <p data-cy=\"message\">{message}</p>\n          </>\n        );\n        break;\n      case authenticated:\n        renderLogin = (\n          <p data-cy=\"message\">\n            Hi {JSON.parse(sessionStorage.getItem(\"credentials\")).uid}\n          </p>\n        );\n        break;\n      default:\n        break;\n    }\n    return (\n      <div class=\"backgroundImage\">\n        <Menu size=\"small\" inverted>\n          <Menu.Menu position=\"right\">\n            <Menu.Item>{renderLogin}</Menu.Item>\n          </Menu.Menu>\n        </Menu>\n        <Grid style={{ height: \"100vh\" }} textAlign=\"center\">\n          <Grid.Row style={{ height: \"24%\" }}>\n            <h1 data-cy=\"title\" class=\"title\">\n              Funny Jokes\n            </h1>\n          </Grid.Row>\n          <Grid.Row style={{ height: \"76%\" }}>\n            <JokeManager authenticated={this.state.authenticated} />\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport axios from \"axios\";\nimport 'semantic-ui-css/semantic.min.css';\n\nlet apiUrl;\nif (process.env.NODE_ENV === \"production\") {\n  apiUrl = \"https://funny-jokes-api.herokuapp.com/api/v1\";\n} else {\n  apiUrl = \"http://localhost:3000/api/v1\";\n}\naxios.defaults.baseURL = apiUrl;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}