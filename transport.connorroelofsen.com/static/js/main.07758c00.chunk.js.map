{"version":3,"sources":["index.js","modules/route.js","components/Map.jsx","components/TotalPrice.jsx","components/RouteForm.jsx","components/NavBar.jsx","App.jsx","reportWebVitals.js"],"names":["apiUrl","Route","from","to","axios","method","url","params","origin","destination","key","process","response","data","status","result","routes","Error","message","distance","price","Map","useState","directions","setDirections","currentPosition","setCurrentPosition","success","position","lat","coords","latitude","lng","longitude","useEffect","navigator","geolocation","getCurrentPosition","Container","className","data-cy","googleMapsApiKey","mapContainerStyle","height","width","zoom","center","onDragEnd","e","latLng","onMarkerDragEnd","draggable","options","travelMode","callback","TotalPrice","Segment","RouteForm","routeInformation","setRouteInformation","invalidLocationMessage","setInvalidLocationMessage","setFrom","setTo","setPrice","createRoute","event","a","preventDefault","target","value","legs","Message","Header","start_address","end_address","text","duration","id","Form","onSubmit","Input","icon","iconPosition","label","placeholder","name","type","required","Button","content","color","Navbar","Menu","Item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","baseURL","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07758c00.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\nimport axios from \"axios\";\n\nlet apiUrl;\nif (process.env.NODE_ENV === \"production\") {\n  apiUrl = \"https://transport-optimum.herokuapp.com/api/v1\";\n} else {\n  apiUrl = \"http://localhost:3000/api/v1\";\n}\naxios.defaults.baseURL = apiUrl;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nreportWebVitals();\n","import axios from \"axios\";\n\nconst apiKey = process.env.REACT_APP_MAPSDIRECTIONS_API_KEY;\n\nconst Route = {\n  async create(from, to) {\n    let result;\n\n    try {\n      let response = await axios({\n        method: \"post\",\n        url:\n          \"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/directions/json\",\n        params: {\n          origin: from,\n          destination: to,\n          key: apiKey,\n        },\n      });\n      if (response.data.status === \"OK\") {\n        result = response.data.routes[0];\n      } else {\n        throw new Error(\n          \"Something went wrong. Try again with another location.\"\n        );\n      }\n    } catch (error) {\n      result = error.message;\n    } finally {\n      return result;\n    }\n  },\n\n  async getPrice(distance) {\n    let result;\n    try {\n      let response = await axios({\n        method: \"post\",\n        url: \"/prices\",\n        params: { distance: distance },\n      });\n      result = response.data.price;\n    } catch (error) {\n      result = error.message;\n    } finally {\n      return result;\n    }\n  },\n};\n\nexport { Route };\n","import {\n  GoogleMap,\n  LoadScript,\n  Marker,\n  DirectionsRenderer,\n  DirectionsService,\n} from \"@react-google-maps/api\";\nimport { useState, useEffect } from \"react\";\nimport { Container } from \"semantic-ui-react\";\n\nconst Map = ({ from, to }) => {\n  const [directions, setDirections] = useState();\n  const [currentPosition, setCurrentPosition] = useState({});\n  const apiKey = process.env.REACT_APP_MAPSDIRECTIONS_API_KEY;\n  const success = (position) => {\n    const currentPosition = {\n      lat: position.coords.latitude,\n      lng: position.coords.longitude,\n    };\n    setCurrentPosition(currentPosition);\n  };\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(success);\n  });\n  const onMarkerDragEnd = (e) => {\n    const lat = e.latLng.lat();\n    const lng = e.latLng.lng();\n    setCurrentPosition({ lat, lng });\n  };\n  const mapStyles = {\n    height: \"80vh\",\n    width: \"100%\",\n  };\n  const directionsCallback = (response) => {\n    if (response !== null) setDirections(response);\n  };\n  \n  return (\n    <Container>\n      <div className=\"map-container\" data-cy=\"map-container\">\n        <LoadScript googleMapsApiKey={apiKey}>\n          <GoogleMap\n            data-cy=\"map\"\n            mapContainerStyle={mapStyles}\n            zoom={10}\n            center={currentPosition}\n          >\n            {currentPosition.lat ? (\n              <Marker\n                position={currentPosition}\n                onDragEnd={(e) => onMarkerDragEnd(e)}\n                draggable={true}\n              />\n            ) : null}\n            {directions && (\n              <DirectionsRenderer\n                data-cy=\"map-renderer\"\n                options={{\n                  directions: directions,\n                }}\n              />\n            )}\n            {from && to && (\n              <DirectionsService\n                options={{\n                  destination: from,\n                  origin: to,\n                  travelMode: \"DRIVING\",\n                }}\n                callback={directionsCallback}\n              />\n            )}\n          </GoogleMap>\n        </LoadScript>\n      </div>\n    </Container>\n  );\n};\n\nexport default Map;\n","import React from \"react\";\nimport { Segment } from \"semantic-ui-react\";\n\nconst TotalPrice = ({ price }) => {\n  return (\n    <Segment className=\"total-price\" data-cy=\"total-price\">\n      Our price estimate for this routes is SEK: {price}\n    </Segment>\n  );\n};\n\nexport default TotalPrice;\n","import React, { useState } from \"react\";\nimport { Button, Form, Container, Message } from \"semantic-ui-react\";\nimport { Route } from \"../modules/route\";\nimport Map from \"./Map\";\nimport TotalPrice from \"./TotalPrice\";\nimport { Segment } from 'semantic-ui-react'\n\nconst RouteForm = () => {\n  const [routeInformation, setRouteInformation] = useState();\n  const [invalidLocationMessage, setInvalidLocationMessage] = useState();\n  const [from, setFrom] = useState();\n  const [to, setTo] = useState();\n  const [price, setPrice] = useState();\n\n  const createRoute = async (event) => {\n    event.preventDefault();\n    setFrom(event.target.origin.value);\n    setTo(event.target.destination.value);\n\n    const from = event.target.origin.value;\n    const to = event.target.destination.value;\n    const response = await Route.create(from, to);\n\n    if (typeof response === \"object\") {\n      setPrice(await Route.getPrice(response.legs[0].distance.value));\n      setRouteInformation(response.legs[0]);\n      setInvalidLocationMessage(false);\n    } else {\n      setInvalidLocationMessage(response);\n      setRouteInformation(false);\n      setPrice(false);\n    }\n  };\n\n  return (\n    <Container className=\"box\" data-cy=\"box\">\n      {routeInformation && (\n        <Message data-cy=\"route-information-box\">\n          <Message.Header className=\"route\" data-cy=\"successful-request\">\n            Your route:\n            <div className=\"origin\" data-cy=\"origin\">\n              Starting point - {routeInformation.start_address}\n            </div>\n            <div className=\"destination\" data-cy=\"destination\">\n              Destination - {routeInformation.end_address}\n            </div>\n            <div className=\"route-distance\" data-cy=\"route-distance\">\n              Distance: {routeInformation.distance.text}\n            </div>\n            <div className=\"route-time\" data-cy=\"route-time\">\n              Duration: {routeInformation.duration.text}\n            </div>\n          </Message.Header>\n        </Message>\n      )}\n      {invalidLocationMessage && (\n        <Segment id=\"failure-box\" data-cy=\"failure-message\">\n          <Message.Header id=\"fail-message\" data-cy=\"fail-message\">\n            {invalidLocationMessage}\n          </Message.Header>\n        </Segment>\n      )}\n      <Form data-cy=\"route-form\" onSubmit={(event) => createRoute(event)}>\n        <Form.Input\n          icon=\"shipping fast\"\n          iconPosition=\"left\"\n          label=\"From:\"\n          placeholder=\"Type in your location\"\n          name=\"origin\"\n          type=\"input\"\n          id=\"from\"\n          data-cy=\"from\"\n          required\n        />\n        <Form.Input\n          icon=\"warehouse\"\n          iconPosition=\"left\"\n          label=\"To:\"\n          placeholder=\"Type in your location\"\n          name=\"destination\"\n          type=\"input\"\n          id=\"to\"\n          data-cy=\"to\"\n          required\n        />\n        <Button\n          data-cy=\"submit-route\"\n          id=\"submit-route\"\n          content=\"Submit Your Route\"\n          color=\"green\"\n        ></Button>\n      </Form>\n      {price && <TotalPrice price={price} />}\n      {<Map from={from} to={to} />}\n    </Container>\n  );\n};\n\nexport default RouteForm;\n","import React from \"react\";\nimport { Header, Menu } from \"semantic-ui-react\";\n\nconst Navbar = () => {\n  return (\n    <div>\n        <Header className=\"navigation-bar\" data-cy=\"navigation-bar\">\n          <Menu id=\"menu\">\n          <Menu.Item data-cy=\"transport-optimum\" name=\"transport-optimum\" icon=\"shipping fast\" iconPosition=\"left\">\n              Transport Optimum\n            </Menu.Item>\n          </Menu>\n        </Header>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport RouteForm from \"./components/RouteForm\";\nimport Navbar from \"./components/NavBar\";\n\nconst App = () => {\n  return (\n    <>\n    <Navbar/>\n    <RouteForm />\n    </>\n  )\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"],"sourceRoot":""}